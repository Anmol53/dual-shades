import mongoose from "mongoose";

/**
 * Defines the User schema for MongoDB using Mongoose.
 *
 * @typedef {Object} UserDocument
 * @property {string} email - The user's email. It must be unique and required.
 * @property {string} name - The user's full name. This is required.
 * @property {string} image - The URL or path to the user's profile image. This is optional.
 * @property {mongoose.Types.ObjectId} plan - The unique identifier of the subscription plan associated with the user. This is required.
 * @property {Object} usage - The usage statistics for the user.
 * @property {number} usage.total_usage - The total usage by the user across all time. This is a number.
 * @property {number} usage.current_month_usage - The usage for the current month. This is a number.
 * @property {Date} usage.last_used_date - The date when the user last used the service.
 * @property {Date} createdAt - The timestamp of when the user was created. Automatically generated by Mongoose.
 * @property {Date} updatedAt - The timestamp of when the user was last updated. Automatically generated by Mongoose.
 *
 * @returns {Model<UserDocument>} The Mongoose model for the User schema.
 */
const UserSchema = new mongoose.Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
    },
    name: {
      type: String,
      required: true,
      trim: true,
    },
    image: {
      type: String,
      trim: true,
    },
    plan: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Plan",
      required: true,
    },
    usage: {
      total_usage: {
        type: Number,
        default: 0,
      },
      current_month_usage: {
        type: Number,
        default: 0,
      },
      last_used_date: {
        type: Date,
        default: null,
      },
    },
  },
  { timestamps: true }
);

/**
 * Mongoose middleware function that hashes the password before saving a user document.
 * This function is executed before the 'save' event on the UserSchema.
 *
 * @function preSave
 * @memberof UserSchema
 * @param {function} next - The callback function to be invoked after the middleware function.
 * @returns {void}
 */
UserSchema.pre("save", async function (next) {
  try {
    next();
  } catch (error) {
    // If an error occurs during password hashing, pass the error to the next middleware function
    next(error);
  }
});

export default mongoose.models.User || mongoose.model("User", UserSchema);
